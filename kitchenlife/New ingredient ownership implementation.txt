In Django (python), there is an app with models for Profile and Ingredient:

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete= models.CASCADE, related_name="profile")
    ingredients_referenced = models.ManyToManyField(Ingredient, related_name="referenced_by_profile", blank=True) # every ingredient ever used by this user
    ingredients_owned = models.ManyToManyField(Ingredient,related_name="owned_by_profile", blank=True) # ingredients currently available to this user

class Ingredient(models.Model):
    name = models.CharField(max_length=50)
    long_life = models.BooleanField(null= True, blank=True)
    shelf_life = models.IntegerField(null= True, blank=True)

The project should be update in such a way that whenever an ingredient is added to "ingredients owned", the current date is saved to an individual profile's instance of that ingredient as "date_added". If ingredient.long_life == False, the ingredient should save the field "expiry_date". After that expiry date the ingredient should be automatically removed. The "Profile" model should keep track of the last 20 items to expire. Additionally, a profile should be able to locally modify the "long_life" field.