def decode_XKCD_tuple(xkcd_values : tuple, k : int) -> list:

Use the map function to iterate through xkcd_values and apply the "decode_value(...)" to each element.
Then sort the list in reverse order and return the values as far as k




def decode_value(xkcd : str ) -> int:

Simply calls the two functions below




def xkcd_to_list_of_weights(xkcd : str) -> list:

I tried 2 solutions.

Solution 1:
The algorithm loops forward with a while loop, using a cursor "i" starting from 0. When i is greater than the length, the loop ends.
Long list of if/elif statements. Checks if the next 4 letters in the string are "1000", and appends that to the list, 
and moves the cursor forward 4 positions.
If the letters aren't "1000", it checks if they are "500", and all other variations down to 1, and appends to list and moves
the cursor forward the appropriate amount.
Returns the list.

Solution 2:
A subtotal is set to the first value in the string.
The algo loops with a for loop, checking every character in the string. 
If the algorithm finds a "1" or a "5", it will append the subtotal to the list. Then it will use a dictionary to set a temp string to int 
1 or 5 based on the current string element.
If the algo finds a 0, it will use a dictionary to set the next element based on the subtotal (ie if it finds 1, it will return 10).
Returns the list

Both functions perform comparably, the solution 2 tends to be a bit faster. The bigger the number, the better soln 2 performs.
Apparently we can't use dict so the source code uses soln 1.




def list_of_weights_to_number(weights : list ) -> int:

Sets the return value, output, to the last element in the list weights, as the last element is always positive. Sets the iterator i to 1.
Loops through the list of weights comparing elementA in list the to the following elementB. If the following value is greater, the first 
value is subtracted. If the following value is lower, then first value is added.